// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TaskBuilderTest ObjectTaskBuilder 1`] = `
[
  {
    "apiVersion": "tekton.dev/v1",
    "kind": "Task",
    "metadata": {
      "annotations": undefined,
      "labels": undefined,
      "name": "ansible-runner",
    },
    "spec": {
      "description": "Task to run Ansible playbooks using Ansible Runner",
      "params": [
        {
          "default": "",
          "description": "",
          "name": "project-dir",
        },
      ],
      "results": [],
      "steps": [
        {
          "env": undefined,
          "image": "$(params.image)",
          "name": "requirements",
          "script": "apiVersion: v1
kind: Namespace
metadata:
  name: MyNamespace
",
          "workingDir": undefined,
        },
        {
          "env": undefined,
          "image": "$(params.image)",
          "name": "run-playbook",
          "script": "apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: ibm-operator-catalog
  namespace: openshift-marketplace
spec:
  displayName: IBM Operator Catalog
  publisher: IBM
  sourceType: grpc
  image: icr.io/cpopen/ibm-operator-catalog
  updateStrategy:
    registryPoll:
      interval: 45m
",
          "workingDir": undefined,
        },
      ],
      "workspaces": [
        {
          "description": "The Ansibler runner directory",
          "name": "runner-dir",
        },
      ],
    },
  },
]
`;

exports[`TaskBuilderTest PullRequestTaskBuilder 1`] = `
[
  {
    "apiVersion": "tekton.dev/v1",
    "kind": "Task",
    "metadata": {
      "annotations": undefined,
      "labels": undefined,
      "name": "pull-request",
    },
    "spec": {
      "description": "This Task allows a user to interact with an SCM (source control management)
system through an abstracted interface

This Task works with both public SCM instances and self-hosted/enterprise GitHub/GitLab
instances. In download mode, this Task will look at the state of an existing pull
request and populate the pr workspace with the state of the pull request, including the
.MANIFEST file. In upload mode, this Task will look at the contents of the pr workspace
 and compare it to the .MANIFEST file (if it exists).",
      "params": [
        {
          "default": "",
          "description": "If "download", the state of the pull request at \`url\` will be fetched. If "upload" then the pull request at \`url\` will be updated.",
          "name": "mode",
        },
        {
          "default": "",
          "description": "The URL of the Pull Reuqest, e.g. \`https://github.com/bobcatfish/catservice/pull/16\`",
          "name": "url",
        },
        {
          "default": "",
          "description": "The type of SCM system, currently \`github\` or \`gitlab\`",
          "name": "provider",
        },
        {
          "default": "",
          "description": "The name of an opaque secret containing a key called "token" with a base64 encoded SCM token",
          "name": "secret-key-ref",
        },
        {
          "default": "false",
          "description": "If "true", certificate validation will be disabled",
          "name": "insecure-skip-tls-verify",
        },
      ],
      "results": [],
      "steps": [
        {
          "args": [
            "-url",
            "$(params.url)",
            "-path",
            "$(workspaces.pr.path)",
            "-mode",
            "$(params.mode)",
            "-provider",
            "$(params.provider)",
            "-insecure-skip-tls-verify",
            "$(params.insecure-skip-tls-verify)",
          ],
          "command": [
            "/ko-app/pullrequest-init",
          ],
          "env": [
            {
              "name": "AUTH_TOKEN",
              "valueFrom": {
                "secretKeyRef": {
                  "key": "token",
                  "name": "$(params.secret-key-ref)",
                },
              },
            },
          ],
          "image": "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/pullrequest-init@sha256:69633ecd0e948f6462c61bb9e008b940a05b143ef51c67e6e4093278a23dac53",
          "name": "pullrequest-init",
          "workingDir": undefined,
        },
      ],
      "workspaces": [
        {
          "description": "",
          "name": "pr",
        },
      ],
    },
  },
]
`;

exports[`TaskBuilderTest ScriptDataBuilder 1`] = `
[
  {
    "apiVersion": "tekton.dev/v1",
    "kind": "Task",
    "metadata": {
      "annotations": undefined,
      "labels": undefined,
      "name": "ansible-runner",
    },
    "spec": {
      "description": "Task to run Ansible playbooks using Ansible Runner",
      "params": [],
      "results": [],
      "steps": [
        {
          "env": undefined,
          "image": "docker.io/hello-world",
          "name": "requirements",
          "script": "#!/usr/bin/env bash
echo this is my script data",
          "workingDir": undefined,
        },
      ],
      "workspaces": [],
    },
  },
]
`;

exports[`TaskBuilderTest TaskBuilderBasic 1`] = `
[
  {
    "apiVersion": "tekton.dev/v1",
    "kind": "Task",
    "metadata": {
      "annotations": undefined,
      "labels": undefined,
      "name": "ansible-runner",
    },
    "spec": {
      "description": "Task to run Ansible playbooks using Ansible Runner",
      "params": [
        {
          "default": "",
          "description": "",
          "name": "project-dir",
        },
      ],
      "results": [],
      "steps": [
        {
          "env": undefined,
          "image": "$(params.image)",
          "name": "requirements",
          "script": "#!/bin/bash\\nset -e\\n\\nif [ -f requirements.txt ];\\nthen\\n  pip3 install --user \\\\n  -r requirements.txt\\nfi\\n\\nif [ -f  requirements.yml ];\\nthen\\n  ansible-galaxy role install -vv \\\\n    -r requirements.yml\\n  ansible-galaxy collection install -vv \\\\n    -r requirements.yml\\nfi\\n",
          "workingDir": "$(workspaces.runner-dir.path)/$(params.project-dir)",
        },
        {
          "args": [
            "ansible-runner",
            "run",
            "$(params.args)",
            "$(params.project-dir)",
          ],
          "command": [
            "entrypoint",
          ],
          "env": undefined,
          "image": "$(params.image)",
          "name": "run-playbook",
          "workingDir": "$(workspaces.runner-dir.path)",
        },
      ],
      "workspaces": [
        {
          "description": "The Ansibler runner directory",
          "name": "runner-dir",
        },
      ],
    },
  },
]
`;

exports[`TaskBuilderTest TaskBuilderIBMSecretGet 1`] = `
[
  {
    "apiVersion": "tekton.dev/v1",
    "kind": "Task",
    "metadata": {
      "annotations": {
        "tekton.dev/categories": "IBM Cloud",
        "tekton.dev/displayName": "IBM Cloud Secrets Manager Get Secret",
        "tekton.dev/pipelines.minVersion": "0.17.0",
        "tekton.dev/platforms": "linux/amd64",
        "tekton.dev/tags": "cli",
      },
      "labels": {
        "app.kubernetes.io/version": "0.1",
      },
      "name": "ibmcloud-secrets-manager-get",
    },
    "spec": {
      "description": "This task retrieves a secret from IBM Cloud Secrets Manager using a key ID",
      "params": [
        {
          "default": "968d7819-f2c5-7b67-c420-3c6bfd51521e",
          "description": "An IBM Cloud Secrets Manager key ID",
          "name": "KEY_ID",
        },
      ],
      "results": [],
      "steps": [
        {
          "env": undefined,
          "image": "quay.io/openshift/origin-cli:4.7",
          "name": "retrieve-key",
          "script": "#!/usr/bin/env bash\\nset -x\\n\\n# Retrieves the IBM Cloud API Key configured in a \`deployer\` cluster\\n\\nexport IBMCLOUD_API_KEY=$(oc get secret ibm-secret -n kube-system -o jsonpath='{.data.apiKey}' | base64 -d)\\nexport AUTH_RESPONSE_JSON=$(curl -s -X POST \\\\n  "https://iam.cloud.ibm.com/identity/token" \\\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\\n  --header 'Accept: application/json' \\\\n  --data-urlencode 'grant_type=urn:ibm:params:oauth:grant-type:apikey' \\\\n  --data-urlencode "apikey=\${IBMCLOUD_API_KEY}")\\nexport ACCESS_TOKEN=$(echo $AUTH_RESPONSE_JSON | grep -o '"access_token":"[^"]*' | grep -o '[^"]*$')\\nexport SECRET_JSON=$(curl -s -X GET --location --header "Authorization: Bearer \${ACCESS_TOKEN}" --header "Accept: application/json" "$(params.SECRETS_MANAGER_ENDPOINT_URL)/api/v2/secrets/$(params.KEY_ID)")\\nexport SECRET=$(echo $SECRET_JSON |  grep -o '"payload":"[^"]*' | grep -o '[^"]*$')\\nprintf "\${SECRET}" | tee $(results.secret-value.path)",
          "workingDir": undefined,
        },
      ],
      "workspaces": [],
    },
  },
]
`;
